[
  {
    "objectID": "library/The Evolution of Marketing/The Production Era.html",
    "href": "library/The Evolution of Marketing/The Production Era.html",
    "title": "The Production Era",
    "section": "",
    "text": "The Production Era, spanning from the late 19th century to the early 20th century, marked a significant phase in the evolution of marketing. This era was characterized by a shift towards mass production driven by the advent of the Industrial Revolution, which saw the development and proliferation of machinery and steam power facilitating large-scale production12. Here’s a more detailed exposition of the Production Era under the requested headings:\n\nCharacteristics:\n\nMass Production: The core characteristic of the Production Era was the emphasis on mass production. Businesses primarily focused on producing goods as efficiently and in as large quantities as possible to meet the growing demands of expanding markets. This was largely facilitated by technological advancements like the assembly line and mechanized factories21.\nEconomies of Scale: As companies scaled up their production capabilities, they began to realize economies of scale, where the cost per unit of production decreases with increasing scale. This was critical for achieving cost leadership in the market1.\nStandardization and High Production Efficiency: The era saw a focus on standardization and achieving high production efficiency through repetitive and standardized processes. This approach was believed to reduce costs and subsequently lower the price of goods for consumers13.\n\n\n\nMarketing Focus:\n\nProduct-Centric Approach: The marketing focus during this era was heavily product-centric. The prevailing mindset was that a good product would sell itself, with little to no consideration for consumer preferences or needs. The emphasis was on creating products that were affordable and readily available to consumers45.\nLimited Advertising: Although advertising was present, it was limited compared to later eras. The primary goal was to inform consumers about the availability of products rather than to create a brand identity or understand consumer preferences6.\nPrice Over Quality: Companies believed that consumers valued the price of a product over its quality. This assumption led to a focus on reducing production costs to offer lower prices to consumers, often at the expense of product quality1.\n\n\n\nExamples:\n\nFord Motor Company: One of the quintessential examples of the Production Era’s marketing ethos is the Ford Motor Company. Under the leadership of Henry Ford, the company epitomized the era’s emphasis on mass production, standardization, and cost reduction. Ford’s implementation of the assembly line drastically reduced the cost of the Model T, making automobiles affordable for a broad segment of the population1.\nSlater Mill: Another company that dominated this era was Slater Mill, which along with Ford Motor Company, hired thousands of factory workers to meet the demand for production7.\n\n\n\nReferences:\n\nMarketing Study Guide. (n.d.). About the production era. https://www.marketingstudyguide.com/production-era\nLibrary of Congress. (n.d.). Work in the Late 19th Century. https://www.loc.gov\nLumen Learning. (n.d.). A New American Consumer Culture. https://courses.lumenlearning.com\nLinkedIn. (n.d.). Marketing Evolution: The Production Era of Marketing. https://www.linkedin.com\nHive Studio. (n.d.). The 5 Evolution Eras of Marketing. https://hivestudio.net\nChegg. (n.d.). During the “Production Era” companies focused on. https://www.chegg.com\n\nThis detailed exploration provides a comprehensive understanding of the Production Era, shedding light on its distinctive characteristics, marketing focus, and exemplar entities embodying the ethos of this era."
  },
  {
    "objectID": "library/The Evolution of Marketing/The Trade Era.html",
    "href": "library/The Evolution of Marketing/The Trade Era.html",
    "title": "The Trade Era",
    "section": "",
    "text": "Traders\n\n\nThe Trade Era, prior to the onset of the Industrial Revolution, was characterized by basic trade and barter systems which were largely confined to local markets. Below is a more detailed exploration of the Trade Era:\n\nCharacteristics\n\nBasic Trade and Barter System: Before the concept of money was widespread, people engaged in barter, which is the direct exchange of goods and services between parties. For instance, one could trade a bushel of apples for some amount of grain. This system had its drawbacks such as the need for a mutual desire for the goods or services offered by each party, which could make transactions time-consuming and sometimes impractical 1.\nLocal Markets: Trade was predominantly localized due to the lack of efficient transportation and communication systems. The example of the cloth industry in a small Oxfordshire market town, Witney, during the pre-Industrial Revolution period (1500-1700) illustrates the localized nature of markets during this era 2.\n\n\n\nMarketing Focus\n\nLack of Marketing Concept: The notion of marketing as we know it today didn’t exist. The focus was more on the exchange of goods and services rather than promoting or selling them.\n\n\n\nExamples\n\nColonial America: Bartering was an integral part of the colonial American economy, especially in rural areas where currency was scarce. Farmers and traders would exchange goods and services with each other, highlighting the simplicity and necessity of the barter system during this period 3.\nEarly Civilizations: Early civilizations like the Mesopotamian tribes and Phoenicians engaged in bartering. For instance, Phoenicians bartered goods with those located in various other cities across oceans 4.\n\n\n\nImpact of Localized Trade\n\nSelf-Sufficiency: Communities tended to be more self-sufficient and relied on local resources to meet their needs.\nLimited Growth: The growth of trade and economies was limited to local resources and the immediate demand within localized markets.\n\n\n\nTransition Towards Industrialization\n\nAs societies began transitioning towards industrialization, the limitations of the barter system and localized trade became more apparent. The dawn of industrialization in places like Britain brought about new types of roads, trains, and other forms of communication, which helped in expanding trade beyond local markets 5.\n\n\n\nReferences\n\nSquare. “The History of the Trade and Barter System.” Square .\nBaartr. “The History of Bartering: From Ancient Times to Today.” baartr .\nOxford Academic. “The pre-Industrial Revolution, 1500–1700.” Oxford Academic.\nSchoolshistory.org.uk. “Before the Industrial Revolution.” Schoolshistory.org.uk .\nMint. “Guide to the Barter Economy & the Barter System History.” Mint .\nOpenStax. “9.1 Early Industrialization in the Northeast.” OpenStax .\nJSTOR. “The Industrial Revolution and British Imperialism, 1750-1850.” JSTOR .\n\nThe Trade Era was an epoch marked by simple and direct trading systems, largely driven by necessity rather than profit or marketing strategies. It laid the foundation for the more complex economic systems that would follow, particularly as the Industrial Revolution began altering the landscape of trade, communication, and transportation."
  },
  {
    "objectID": "library/demo/index.html",
    "href": "library/demo/index.html",
    "title": "Preface",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "library/demo/summary.html",
    "href": "library/demo/summary.html",
    "title": "Summary",
    "section": "",
    "text": "Summary\nIn summary, this book has no content whatsoever."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev-sandbox",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev-sandbox",
    "section": "Install",
    "text": "Install\npip install nbdev_sandbox"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev-sandbox",
    "section": "How to use",
    "text": "How to use\nDemo using Card class\n\nc = Card(1,3)\nprint(c)\n\n3D\n\n\n\nsuits\n\n['C', 'D', 'H', 'S']"
  },
  {
    "objectID": "blog/posts/2023-11-01-hello-world/index.html",
    "href": "blog/posts/2023-11-01-hello-world/index.html",
    "title": "Hello World!",
    "section": "",
    "text": "For the past years, my homepage was just a placeholder. It served a single purpose: People who enter the domain of my email address in their browser should not look at some weird empty page. So here we go!\nThanks to the incredible Quarto project it was really a matter of a few hours to set everything up. Thank you!\nBTW: The top banner is a stock photo. If I ever produce code that looks anything like this dense mess, please remind me to quit programming forever.\nAs pretty much every aspiring early career researcher, I am obviously planning to publish valuable, insightful, and thought-provoking blog posts regularly. See you tomorrow next week in a month at some time for the first actual post. Cheers!\n\nprint(\"hello world\")\n\nhello world"
  },
  {
    "objectID": "papers/document.html",
    "href": "papers/document.html",
    "title": "Toward a Unified Theory of High-Energy Metaphysics: Silly String Theory",
    "section": "",
    "text": "Easily Connect Wedding Vendors To Wedding Planners To Automate the booking process for clients, vendors, and planners in a single location to make booking vendors easy for wedding vendors.\n\n\n\nThis project is to develop a website and mobile application for event management which connects host(Customer) to event planner. Main goal is to provide customer user to ability to add their event on the application and find the best fit vendor (Event organiser) for them.\nFor a demonstration of a line plot on a polar axis, see Figure 1.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\nFigure 1: A line plot on a polar axis\n\n\n\n\n``` ## Acknowledgments {.appendix}\nI am grateful for the insightful comments offered by the anonymous peer reviewers at Books & Texts. The generosity and expertise of one and all have improved this study in innumerable ways and saved me from many errors; those that inevitably remain are entirely my own responsibility."
  },
  {
    "objectID": "papers/document.html#problem-description",
    "href": "papers/document.html#problem-description",
    "title": "Toward a Unified Theory of High-Energy Metaphysics: Silly String Theory",
    "section": "",
    "text": "Easily Connect Wedding Vendors To Wedding Planners To Automate the booking process for clients, vendors, and planners in a single location to make booking vendors easy for wedding vendors."
  },
  {
    "objectID": "papers/document.html#acceptance-criteria",
    "href": "papers/document.html#acceptance-criteria",
    "title": "Toward a Unified Theory of High-Energy Metaphysics: Silly String Theory",
    "section": "",
    "text": "This project is to develop a website and mobile application for event management which connects host(Customer) to event planner. Main goal is to provide customer user to ability to add their event on the application and find the best fit vendor (Event organiser) for them.\nFor a demonstration of a line plot on a polar axis, see Figure 1.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\nFigure 1: A line plot on a polar axis\n\n\n\n\n``` ## Acknowledgments {.appendix}\nI am grateful for the insightful comments offered by the anonymous peer reviewers at Books & Texts. The generosity and expertise of one and all have improved this study in innumerable ways and saved me from many errors; those that inevitably remain are entirely my own responsibility."
  },
  {
    "objectID": "apps/poker/card.html",
    "href": "apps/poker/card.html",
    "title": "Card",
    "section": "",
    "text": "We will be using numbers to represent the playing cards and ranks\n\nsuits\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n\n\nfor instance the suit at index[0]\n\nsuits[0]\n\n'C'\n\n\nThese are the ranks\n\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n\n\n\nclass Card:\n    \"Represents a standard playing card.\"\n    def __init__(self,\n                 suit:int=0,  # an index into suits\n                 rank:int=0): # an index into ranks\n        self.suit = suit\n        self.rank = rank \n\n    def __str__(self):\n        return f'{ranks[self.rank]}{suits[self.suit]}'\n    \n    def __eq__(self, other):\n        return (self.suit == other.suit and self.rank == other.rank)\n    \n    def __lt__(self, other):\n        return self.rank &lt; other.rank  \n    \n    def __gt__(self, other):\n        return self.rank &gt; other.rank\n\n    def __hash__(self):\n        return hash((self.suit, self.rank))\n\n    def __add__(self, other):\n        return self.rank + other.rank\n\n    def __radd__(self, other):\n        return self.rank + other\n\n    def __sub__(self, other):\n        return self.rank - other.rank\n\n    def __rsub__(self, other):\n        return other.rank - self.rank\n\nHere is an example\n\nc = Card(suit=1, rank=3)\nprint(c)\n\n3D\n\n\nTest Equality\n\ntest_eq(Card(1,2), Card(1,2))\ntest_ne(Card(1,2), Card(2,2)) \ntest_ne(Card(1,2), Card(1,3))\n\nTest Comparison\n\nassert Card(1,2) &lt; Card(2,3)\nassert Card(1,3) &gt;  Card(1,2)\n\n\nsource\n\nCard\n\n Card (suit:int=0, rank:int=0)\n\nRepresents a standard playing card.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsuit\nint\n0\nan index into suits\n\n\nrank\nint\n0\nan index into ranks"
  },
  {
    "objectID": "apps/wedding_planner_app_demo.html",
    "href": "apps/wedding_planner_app_demo.html",
    "title": "South Asian AI Wedding Planner",
    "section": "",
    "text": "import pandas as pd\nfrom flask import Flask, request, jsonify\nsource"
  },
  {
    "objectID": "apps/wedding_planner_app_demo.html#data-structure-design",
    "href": "apps/wedding_planner_app_demo.html#data-structure-design",
    "title": "South Asian AI Wedding Planner",
    "section": "Data Structure Design",
    "text": "Data Structure Design\n\n1. Users\n\nUserID: Unique identifier for the user\nName: Full name of the user\nEmail: Email address\nPassword: Encrypted password (for demonstration purposes, we’ll keep it simple)\nUserType: Host, Vendor, or Admin\nMobileNumber: Contact number\nSocialMediaID: Identifier from Google/Facebook (if registered via social media)\n\n\n\n2. Events\n\nEventID: Unique identifier for the event\nHostUserID: UserID of the host creating the event\nEventType: Type of the event (e.g., Wedding, Birthday, etc.)\nEventDetails: Additional details about the event\nBudget: Estimated budget for the event\n\n\n\n3. Quotes\n\nQuoteID: Unique identifier for the quote\nVendorUserID: UserID of the vendor sending the quote\nEventID: Event for which the quote is sent\nQuoteAmount: Quoted amount by the vendor\nQuoteDetails: Additional details or terms of the quote\n\n\n\n4. Messages\n\nMessageID: Unique identifier for the message\nSenderUserID: UserID of the sender\nReceiverUserID: UserID of the receiver\nEventID: Event related to the message\nMessageContent: Content of the message\n\n\n\n5. Subscriptions\n\nSubscriptionID: Unique identifier for the subscription\nVendorUserID: UserID of the vendor subscribing\nSubscriptionType: Type of subscription (e.g., Basic, Premium, etc.)\nSubscriptionDetails: Details about what’s included in the subscription\n\n\n\n6. Notifications (Assumption: Simple notification structure for the demo)\n\nNotificationID: Unique identifier for the notification\nUserID: User receiving the notification\nNotificationContent: Content of the notification\nIsRead: Boolean indicating if the notification has been read\n\nThese are the basic data structures we’ll need for our demo. Next, we’ll implement the user registration and login system."
  },
  {
    "objectID": "apps/wedding_planner_app_demo.html#data-structure-for-wedding-planner-app",
    "href": "apps/wedding_planner_app_demo.html#data-structure-for-wedding-planner-app",
    "title": "South Asian AI Wedding Planner",
    "section": "Data Structure for Wedding Planner App",
    "text": "Data Structure for Wedding Planner App\n\nEntities:\n\nUsers:\n\nAttributes: user_id, name, email, password, user_type (Host, Vendor, Admin), registration_date\nRelationships: Host can create multiple events. Vendor can bid on multiple events. Admin oversees all activities.\n\nEvents:\n\nAttributes: event_id, host_id (foreign key), event_name, event_type, event_date, budget, description\nRelationships: An event is created by one host. Multiple vendors can bid on an event.\n\nQuotes:\n\nAttributes: quote_id, event_id (foreign key), vendor_id (foreign key), quoted_price, status (Pending, Accepted, Rejected)\nRelationships: A quote is associated with one event and one vendor.\n\nMessages:\n\nAttributes: message_id, sender_id (foreign key), receiver_id (foreign key), event_id (foreign key), content, timestamp\nRelationships: Messages are exchanged between hosts and vendors for a specific event.\n\nSubscriptions (Mock for demo):\n\nAttributes: subscription_id, vendor_id (foreign key), subscription_type, start_date, end_date\nRelationships: A vendor can have one active subscription at a time.\n\n\n\n\nAssumptions:\n\nFor the sake of simplicity, we’ll use mock data for user registration and login.\nEvent details are simplified to include only essential attributes.\nMessaging is basic without media sharing.\nWe’ll use a mock subscription plan for vendors for the demo.\n\n\nsource\n\n\nview_events\n\n view_events (vendor)\n\n\nsource\n\n\nMessagingSystem\n\n MessagingSystem ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nMessage\n\n Message (sender, receiver, content)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n# Mock data for Users\nusers_data = {\n    'user_id': [1, 2, 3, 4],\n    'name': ['Alice', 'Bob', 'Charlie', 'Admin'],\n    'email': ['alice@email.com', 'bob@email.com', 'charlie@email.com', 'admin@email.com'],\n    'password': ['pass123', 'pass456', 'pass789', 'adminpass'],  # For demo purposes, passwords are kept simple\n    'user_type': ['Host', 'Vendor', 'Vendor', 'Admin'],\n    'registration_date': ['2023-08-01', '2023-08-02', '2023-08-03', '2023-08-01']\n}\nusers_df = pd.DataFrame(users_data)\n\nusers_df\n\n\n\n\n\n\n\n\nuser_id\nname\nemail\npassword\nuser_type\nregistration_date\n\n\n\n\n0\n1\nAlice\nalice@email.com\npass123\nHost\n2023-08-01\n\n\n1\n2\nBob\nbob@email.com\npass456\nVendor\n2023-08-02\n\n\n2\n3\nCharlie\ncharlie@email.com\npass789\nVendor\n2023-08-03\n\n\n3\n4\nAdmin\nadmin@email.com\nadminpass\nAdmin\n2023-08-01\n\n\n\n\n\n\n\n\nsource\n\n\nRegistrationSystem\n\n RegistrationSystem ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nUser\n\n User (user_id, name, email, password, user_type, mobile_number,\n       social_media_id=None)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nAdmin\n\n Admin (name)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nNotificationSystem\n\n NotificationSystem ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nNotification\n\n Notification (user, content)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n# Mock data for Events\nevents_data = {\n    'event_id': [101, 102, 103],\n    'host_id': [1, 1, 2],\n    'event_name': ['Wedding Ceremony', 'Reception Party', 'Birthday Bash'],\n    'event_type': ['Wedding', 'Party', 'Birthday'],\n    'event_date': ['2023-12-01', '2023-12-02', '2023-11-15'],\n    'budget': [10000, 5000, 2000],\n    'description': ['A grand wedding ceremony.', 'A fun-filled reception party.', 'A surprise birthday bash.']\n}\nevents_df = pd.DataFrame(events_data)\n\nevents_df\n\n\n\n\n\n\n\n\nevent_id\nhost_id\nevent_name\nevent_type\nevent_date\nbudget\ndescription\n\n\n\n\n0\n101\n1\nWedding Ceremony\nWedding\n2023-12-01\n10000\nA grand wedding ceremony.\n\n\n1\n102\n1\nReception Party\nParty\n2023-12-02\n5000\nA fun-filled reception party.\n\n\n2\n103\n2\nBirthday Bash\nBirthday\n2023-11-15\n2000\nA surprise birthday bash.\n\n\n\n\n\n\n\n\n# Mock data for Quotes\nquotes_data = {\n    'quote_id': [201, 202, 203],\n    'event_id': [101, 102, 103],\n    'vendor_id': [2, 3, 2],\n    'quoted_price': [9500, 4800, 1900],\n    'status': ['Pending', 'Accepted', 'Rejected']\n}\nquotes_df = pd.DataFrame(quotes_data)\n\nquotes_df\n\n\n\n\n\n\n\n\nquote_id\nevent_id\nvendor_id\nquoted_price\nstatus\n\n\n\n\n0\n201\n101\n2\n9500\nPending\n\n\n1\n202\n102\n3\n4800\nAccepted\n\n\n2\n203\n103\n2\n1900\nRejected\n\n\n\n\n\n\n\n\nsource\n\n\nsend_quote_request\n\n send_quote_request (host_id, vendor_id, event_id, content)\n\nSimulate sending a quote request from a host to a vendor.\n\nsource\n\n\non_submit_button_clicked\n\n on_submit_button_clicked (b)\n\n\nsource\n\n\nhost_interface\n\n host_interface ()\n\n\nsource\n\n\nvendor_interface\n\n vendor_interface ()\n\n\nsource\n\n\nvendor_interface\n\n vendor_interface ()\n\n\nsource\n\n\nadmin_interface\n\n admin_interface ()\n\n\ndef test_data_creation():\n    # Test Users Data\n    assert len(users_df) &gt; 0, 'No users data found.'\n    assert 'user_id' in users_df.columns, 'user_id column missing in users data.'\n    assert 'user_type' in users_df.columns, 'user_type column missing in users data.'\n\n    # Test Events Data\n    assert len(events_df) &gt; 0, 'No events data found.'\n    assert 'event_id' in events_df.columns, 'event_id column missing in events data.'\n    assert 'host_id' in events_df.columns, 'host_id column missing in events data.'\n\n    # Test Quotes Data\n    assert len(quotes_df) &gt; 0, 'No quotes data found.'\n    assert 'quote_id' in quotes_df.columns, 'quote_id column missing in quotes data.'\n    assert 'event_id' in quotes_df.columns, 'event_id column missing in quotes data.'\n    assert 'vendor_id' in quotes_df.columns, 'vendor_id column missing in quotes data.'\n\n    print('Data Creation Tests Passed!')\n\ntest_data_creation()\n\nData Creation Tests Passed!\n\n\n\ndef test_functionalities():\n    # Test Adding Events\n    initial_event_count = len(events_df)\n    new_event = {'event_id': 4, 'event_name': 'Test Event', 'event_type': 'Wedding', 'budget': 10000, 'host_id': 1}\n    events_df.loc[len(events_df)] = new_event\n    assert len(events_df) == initial_event_count + 1, 'Failed to add new event.'\n\n    # Test Sending Quotes\n    initial_quote_count = len(quotes_df)\n    new_quote = {'quote_id': 4, 'event_id': 4, 'vendor_id': 2, 'amount': 9000}\n    quotes_df.loc[len(quotes_df)] = new_quote\n    assert len(quotes_df) == initial_quote_count + 1, 'Failed to send quote.'\n\n    # Test User Management\n    assert 1 in users_df['user_id'].values, 'Host user missing.'\n    assert 2 in users_df['user_id'].values, 'Vendor user missing.'\n\n    print('Functionality Tests Passed!')\n\ntest_functionalities()\n\nFunctionality Tests Passed!\n\n\n\n\n\nRequirement already satisfied: flask in /usr/local/lib/python3.11/site-packages (2.3.2)\nRequirement already satisfied: Werkzeug&gt;=2.3.3 in /usr/local/lib/python3.11/site-packages (from flask) (2.3.6)\nRequirement already satisfied: Jinja2&gt;=3.1.2 in /usr/local/lib/python3.11/site-packages (from flask) (3.1.2)\nRequirement already satisfied: itsdangerous&gt;=2.1.2 in /usr/local/lib/python3.11/site-packages (from flask) (2.1.2)\nRequirement already satisfied: click&gt;=8.1.3 in /usr/local/lib/python3.11/site-packages (from flask) (8.1.3)\nRequirement already satisfied: blinker&gt;=1.6.2 in /usr/local/lib/python3.11/site-packages (from flask) (1.6.2)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in /usr/local/lib/python3.11/site-packages (from Jinja2&gt;=3.1.2-&gt;flask) (2.1.2)\n\n\n\n# Initialize Flask app\napp = Flask(__name__)\n\n# Sample endpoint to test Flask setup\n@app.route('/ping', methods=['GET'])\ndef ping():\n    return jsonify({'message': 'pong'}), 200\n\n# Run Flask app (Note: This won't work directly in Noteable.io, but is here for demonstration purposes)\n# if __name__ == '__main__':\n#     app.run(debug=True)\n\n\n# Connect to SQLite3 Database\ndef get_db_connection():\n    conn = sqlite3.connect('wedding_planner_app.db')\n    conn.row_factory = sqlite3.Row\n    return conn\n\n# User Registration Endpoint\n@app.route('/register', methods=['POST'])\ndef register_user():\n    data = request.get_json()\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    cursor.execute('''\n    INSERT INTO users (user_type, name, email, password, phone_number)\n    VALUES (?, ?, ?, ?, ?)\n    ''', (data['user_type'], data['name'], data['email'], data['password'], data['phone_number']))\n    conn.commit()\n    conn.close()\n    return jsonify({'message': 'User registered successfully!'}), 201\n\n# Event Creation Endpoint\n@app.route('/create_event', methods=['POST'])\ndef create_event():\n    data = request.get_json()\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    cursor.execute('''\n    INSERT INTO events (host_id, event_name, event_type, budget, event_date)\n    VALUES (?, ?, ?, ?, ?)\n    ''', (data['host_id'], data['event_name'], data['event_type'], data['budget'], data['event_date']))\n    conn.commit()\n    conn.close()\n    return jsonify({'message': 'Event created successfully!'}), 201\n\n# Send Quotes Endpoint\n@app.route('/send_quote', methods=['POST'])\ndef send_quote():\n    data = request.get_json()\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    cursor.execute('''\n    INSERT INTO quotes (event_id, vendor_id, amount)\n    VALUES (?, ?, ?)\n    ''', (data['event_id'], data['vendor_id'], data['amount']))\n    conn.commit()\n    conn.close()\n    return jsonify({'message': 'Quote sent successfully!'}), 201\n\n# Messaging Endpoint\n@app.route('/send_message', methods=['POST'])\ndef send_message():\n    data = request.get_json()\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    cursor.execute('''\n    INSERT INTO messages (sender_id, receiver_id, event_id, message_content)\n    VALUES (?, ?, ?, ?)\n    ''', (data['sender_id'], data['receiver_id'], data['event_id'], data['message_content']))\n    conn.commit()\n    conn.close()\n    return jsonify({'message': 'Message sent successfully!'}), 201\n\n\n!date\n\nTue Oct 31 19:59:26 AEDT 2023\n\n\n\n# Checking the columns of the quotes table\nconn = get_db_connection()\ncursor = conn.cursor()\ncursor.execute('PRAGMA table_info(quotes)')\ncolumns = cursor.fetchall()\nconn.close()\n\n# Displaying the columns\ncolumns\n\n[&lt;sqlite3.Row&gt;,\n &lt;sqlite3.Row&gt;,\n &lt;sqlite3.Row&gt;,\n &lt;sqlite3.Row&gt;,\n &lt;sqlite3.Row&gt;]\n\n\n\n# Extracting and displaying the column names of the quotes table\ncolumn_names = [column[1] for column in columns]\ncolumn_names\n\n['quote_id', 'event_id', 'vendor_id', 'amount', 'quote_date']\n\n\n\n# Checking the columns of the messages table\nconn = get_db_connection()\ncursor = conn.cursor()\ncursor.execute('PRAGMA table_info(messages)')\nmessage_columns = cursor.fetchall()\nconn.close()\n\n# Displaying the columns\nmessage_column_names = [column[1] for column in message_columns]\nmessage_column_names\n\n['message_id',\n 'sender_id',\n 'receiver_id',\n 'event_id',\n 'message_content',\n 'message_date']"
  },
  {
    "objectID": "apps/poker/deck.html",
    "href": "apps/poker/deck.html",
    "title": "Deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA Deck of cards\n\nd = Deck()\nprint(d)\n\nAC; 2C; 3C; 4C; 5C; 6C; 7C; 8C; 9C; 10C; JC; QC; KC; AD; 2D; 3D; 4D; 5D; 6D; 7D; 8D; 9D; 10D; JD; QD; KD; AH; 2H; 3H; 4H; 5H; 6H; 7H; 8H; 9H; 10H; JH; QH; KH; AS; 2S; 3S; 4S; 5S; 6S; 7S; 8S; 9S; 10S; JS; QS; KS\n\n\n\nDeck??\n\nInit signature: Deck()\nDocstring:      A Deck of cards\nType:           type\nSubclasses:"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "nbdev Blog",
    "section": "",
    "text": "Hello World!\n\n\n\n\n\n\n\nnews\n\n\n\n\nFor the past years, my homepage has just been a placeholder. It served a single purpose: People who enter the domain of my email address in their browser should not look at some weird empty page. So here we go!\n\n\n\n\n\n\nMay 20, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "sandbox/sandbox.html",
    "href": "sandbox/sandbox.html",
    "title": "Sandbox Notebook",
    "section": "",
    "text": "Maths\nThis version is displayed inline: \\(\\sum_{i=1}^{k+1}i\\) . You can include text before and after.\n\n\nMermaid\n\n\n\n\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]\n\n\n\n\n\n\n\n\n\nsequenceDiagram\n  participant Alice\n  participant Bob\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n    John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts &lt;br/&gt;prevail!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!\n\n\n\n\n\n\n\nMarkdown\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including: note, warning, important, tip, and caution.\n\n\n\n\n\n\n\n\nTip with Title\n\n\n\nThis is an example of a callout with a title.\n\n\n\n\n\n\n\n\nExpand To Learn About Collapse\n\n\n\n\n\nThis is an example of a ‘folded’ caution callout that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible callout that is expanded by default.\n\n\n\n\n\nCode\nclass User: \n    \"\"\"\n    Represents a user in the system.\n    \"\"\"\n    def __init__(self, \n                user_type:str, # The type of the user (e.g., 'Host/Customer', 'Vendor').\n                email:str, # The email address of the user\n                name:str, # The name of the user\n                mobile_number:str, #The mobile number of the user\n                password:str=\"PASS\", # The password of the user (In a real-world scenario, this would be hashed\n                ):\n\n        self.user_type = user_type\n        self.email = email\n        self.name = name\n        self.mobile_number = mobile_number\n        self.password = password  # In a real-world scenario, passwords would be hashed and not stored in plain text\n        self.events = []  # List to store events created by Host/Customer\n\n\n\nimport numpy as np\n\ndef all(a, # Input array or object that can be converted to an array.\n        axis=None, # Axis or axes along which a logical AND reduction is performed (default: all).\n        out=None, # Alternate output array in which to place the result.\n        keepdims:bool=np._NoValue, # Leave reduced one-dimensional axes in the result?\n        where=np._NoValue, # Elements to include in reduction. See `numpy.ufunc.reduce` for details. New in version 1.20.0.\n        ) -&gt; np.ndarray: # A new boolean or array, or a reference to `out` if its specified.\n    \"Test whether all array elements along a given axis evaluate to `True`.\"\n\n\n\nCollapse\n\nprint(\"This is output. Input is collapsed using #collapse\")\n\nThis is output. Input is collapsed using #collapse"
  },
  {
    "objectID": "library/demo/references.html",
    "href": "library/demo/references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "library/demo/intro.html",
    "href": "library/demo/intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Introduction\nThis is a book created from markdown and executable code.\nSee @knuth84 for additional discussion of literate programming."
  },
  {
    "objectID": "library/The Evolution of Marketing/index.html",
    "href": "library/The Evolution of Marketing/index.html",
    "title": "The Evolution of Marketing",
    "section": "",
    "text": "Marketing has evolved significantly over the years, adapting to changing consumer behaviors and advancements in technology.\nIn the early days, marketing was primarily focused on product-centric approaches, where companies would highlight the features and benefits of their products or services. This approach relied heavily on mass advertising through mediums such as print, radio, and television.\nAs time went on, marketers started realizing the importance of understanding consumer needs and preferences. This led to the rise of market research and segmentation, where companies would conduct studies to identify specific target audiences and tailor their marketing efforts accordingly.\nWith the advent of the internet and digital technologies, marketing underwent another major transformation. The rise of social media, search engines, and e-commerce platforms opened up new avenues for brands to reach and engage with their target customers. Digital marketing strategies such as search engine optimization (SEO), content marketing, social media marketing, and influencer marketing became integral parts of a company’s marketing mix.\nIn recent years, marketing has continued to evolve with the emergence of data-driven marketing and personalized experiences. Marketers now have access to vast amounts of customer data, enabling them to analyze and segment audiences with precision. This data-driven approach allows for more targeted and personalized marketing campaigns, resulting in higher customer engagement and conversion rates.\nLooking ahead, the evolution of marketing is expected to continue as technology continues to advance. Artificial intelligence, virtual reality, and augmented reality are just a few areas that hold potential for transforming the marketing landscape.\nOverall, the evolution of marketing reflects the ever-changing needs and expectations of consumers. Successful marketers understand the importance of staying agile, embracing new technologies, and continuously adapting their strategies to effectively reach and connect with their target audience.\n\n\n\n\nTime Period: Pre-Industrial Revolution\nCharacteristics: Basic trade and barter system, limited to local markets.\nMarketing Focus: None, as the concept of marketing did not exist."
  },
  {
    "objectID": "library/The Evolution of Marketing/index.html#the-trade-era",
    "href": "library/The Evolution of Marketing/index.html#the-trade-era",
    "title": "The Evolution of Marketing",
    "section": "",
    "text": "Time Period: Pre-Industrial Revolution\nCharacteristics: Basic trade and barter system, limited to local markets.\nMarketing Focus: None, as the concept of marketing did not exist."
  }
]