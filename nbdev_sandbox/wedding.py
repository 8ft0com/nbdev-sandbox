# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/apps/Wedding_Planner_App_Demo.ipynb.

# %% auto 0
__all__ = ['user_manager', 'host_registration', 'vendor_registration', 'host_user', 'event_creation', 'messaging_system',
           'vendor_user', 'available_events', 'quote_request', 'system', 'register_msg1', 'register_msg2', 'login_msg1',
           'login_msg2', 'admin_user', 'registered_vendors', 'vendor_approval', 'notification_system',
           'quote_notification', 'approval_notification', 'messages_data', 'messages_df', 'updated_messages_df',
           'user_role_dropdown', 'submit_button', 'output', 'conn', 'cursor', 'User', 'UserManager', 'Event',
           'create_event', 'Message', 'MessagingSystem', 'view_events', 'RegistrationSystem', 'Admin', 'Notification',
           'NotificationSystem', 'send_quote_request', 'on_submit_button_clicked', 'host_interface', 'vendor_interface',
           'admin_interface']

# %% ../nbs/apps/Wedding_Planner_App_Demo.ipynb 4
# The following classes are designed to manage user registration and login for a simple application.

#|export
class User:
    """
    Represents a user in the system.
    
        Attributes:
    - **user_type** (str): The type of the user (e.g., 'Host/Customer', 'Vendor').
    - **email** (str): The email address of the user.
    - **name** (str): The name of the user.
    - **mobile_number** (str): The mobile number of the user.
    - **password** (str): The password of the user (In a real-world scenario, this would be hashed).
    - **events** (list): A list to store events created by Host/Customer.

    """
    def __init__(self, user_type, email, name, mobile_number, password):
        self.user_type = user_type
        self.email = email
        self.name = name
        self.mobile_number = mobile_number
        self.password = password  # In a real-world scenario, passwords would be hashed and not stored in plain text
        self.events = []  # List to store events created by Host/Customer

class UserManager:
    """
    Manages operations related to users.
    
    Attributes:
        users (list): A list to store registered users.
    """
    def __init__(self):
        self.users = []  # List to store registered users

    def register(self, user_type, email, name, mobile_number, password):
        """
        Registers a new user.
        
        Args:
            user_type (str): The type of the user.
            email (str): The email address of the user.
            name (str): The name of the user.
            mobile_number (str): The mobile number of the user.
            password (str): The password of the user.
            
        Returns:
            str: A message indicating the registration status.
        """
        user = User(user_type, email, name, mobile_number, password)
        self.users.append(user)
        return f'{name} registered successfully as a {user_type}!'

    def login(self, email, password):
        """
        Attempts to login a user.
        
        Args:
            email (str): The email address of the user.
            password (str): The password of the user.
            
        Returns:
            str: A message indicating the login status.
        """
        for user in self.users:
            if user.email == email and user.password == password:
                return f'{user.name} logged in successfully!'
        return 'Invalid credentials!'

# Create an instance of UserManager
user_manager = UserManager()

# Register a Host/Customer and a Vendor
host_registration = user_manager.register('Host/Customer', 'host@example.com', 'John Doe', '1234567890', 'password123')
vendor_registration = user_manager.register('Vendor', 'vendor@example.com', 'Vendor Corp', '0987654321', 'vendorpass')

host_registration, vendor_registration


# %% ../nbs/apps/Wedding_Planner_App_Demo.ipynb 5
# Event Creation

class Event:
    def __init__(self, event_name, event_type, event_date, budget):
        self.event_name = event_name
        self.event_type = event_type
        self.event_date = event_date
        self.budget = budget

def create_event(user, event_name, event_type, event_date, budget):
    if user.user_type != 'Host/Customer':
        return 'Only Host/Customer users can create events!'
    event = Event(event_name, event_type, event_date, budget)
    user.events.append(event)
    return f'Event "{event_name}" created successfully!'

# Retrieve the registered Host/Customer
host_user = [user for user in user_manager.users if user.user_type == 'Host/Customer'][0]

# Create a sample event
event_creation = create_event(host_user, 'John & Jane Wedding', 'Wedding', '2023-12-25', 20000)
event_creation

# %% ../nbs/apps/Wedding_Planner_App_Demo.ipynb 8
# Vendor Interaction and Messaging

class Message:
    def __init__(self, sender, receiver, content):
        self.sender = sender
        self.receiver = receiver
        self.content = content

class MessagingSystem:
    def __init__(self):
        self.messages = []

    def send_message(self, sender, receiver, content):
        message = Message(sender, receiver, content)
        self.messages.append(message)
        return f'Message sent from {sender.name} to {receiver.name}!'

def view_events(vendor):
    if vendor.user_type != 'Vendor':
        return 'Only Vendor users can view events!'
    events = [user.events for user in user_manager.users if user.user_type == 'Host/Customer']
    events_list = [event.event_name for sublist in events for event in sublist]
    return events_list

messaging_system = MessagingSystem()

# Retrieve the registered Vendor
vendor_user = [user for user in user_manager.users if user.user_type == 'Vendor'][0]

# Vendor views the list of events
available_events = view_events(vendor_user)

# Vendor sends a quote request for the sample event
quote_request = messaging_system.send_message(vendor_user, host_user, 'Quote request for John & Jane Wedding event.')

available_events, quote_request

# %% ../nbs/apps/Wedding_Planner_App_Demo.ipynb 10
# User Registration & Login Simulation

class User:
    def __init__(self, user_id, name, email, password, user_type, mobile_number, social_media_id=None):
        self.user_id = user_id
        self.name = name
        self.email = email
        self.password = password  # For simplicity, we're not encrypting the password in this demo
        self.user_type = user_type
        self.mobile_number = mobile_number
        self.social_media_id = social_media_id

class RegistrationSystem:
    def __init__(self):
        self.users = []  # List to store registered users

    def register(self, name, email, password, user_type, mobile_number, social_media_id=None):
        user_id = len(self.users) + 1  # Simple user ID generation
        new_user = User(user_id, name, email, password, user_type, mobile_number, social_media_id)
        self.users.append(new_user)
        return f'User {name} registered successfully!'

    def login(self, email, password):
        for user in self.users:
            if user.email == email and user.password == password:
                return f'Welcome {user.name}!'
        return 'Invalid credentials!'

# Testing the registration and login system
system = RegistrationSystem()
register_msg1 = system.register('John Doe', 'john@example.com', 'password123', 'Host', '1234567890')
register_msg2 = system.register('Vendor Inc.', 'vendor@example.com', 'vendorpass', 'Vendor', '0987654321')
login_msg1 = system.login('john@example.com', 'password123')
login_msg2 = system.login('vendor@example.com', 'wrongpass')

register_msg1, register_msg2, login_msg1, login_msg2

# %% ../nbs/apps/Wedding_Planner_App_Demo.ipynb 11
# Admin Panel

class Admin:
    def __init__(self, name):
        self.name = name

    def view_vendors(self):
        vendors = [user for user in user_manager.users if user.user_type == 'Vendor']
        vendor_names = [vendor.name for vendor in vendors]
        return vendor_names

    def approve_vendor(self, vendor_name):
        # In a real-world scenario, this would involve updating the vendor's profile status in the database
        return f'Vendor {vendor_name} approved successfully!'

    def reject_vendor(self, vendor_name):
        # In a real-world scenario, this would involve updating the vendor's profile status in the database
        return f'Vendor {vendor_name} rejected!'

# Create an instance of Admin
admin_user = Admin('Admin User')

# Admin views the list of registered vendors
registered_vendors = admin_user.view_vendors()

# Admin approves the registered vendor
vendor_approval = admin_user.approve_vendor(registered_vendors[0])

registered_vendors, vendor_approval

# %% ../nbs/apps/Wedding_Planner_App_Demo.ipynb 12
# Mock Notification System

class Notification:
    def __init__(self, user, content):
        self.user = user
        self.content = content

class NotificationSystem:
    def __init__(self):
        self.notifications = []

    def send_notification(self, user, content):
        notification = Notification(user, content)
        self.notifications.append(notification)
        return f'Notification sent to {user.name}: "{content}"'

notification_system = NotificationSystem()

# Send a notification to the Host/Customer about the quote request
quote_notification = notification_system.send_notification(host_user, 'You have received a quote request for John & Jane Wedding event.')

# Send a notification to the Vendor about the approval
approval_notification = notification_system.send_notification(vendor_user, 'Your profile has been approved by the admin.')

quote_notification, approval_notification

# %% ../nbs/apps/Wedding_Planner_App_Demo.ipynb 15
# Mock data for Messages
messages_data = {
    'message_id': [301, 302, 303, 304],
    'sender_id': [1, 2, 1, 3],
    'receiver_id': [2, 1, 3, 1],
    'event_id': [101, 101, 102, 102],
    'content': [
        'Hi, can you provide more details about your services?',
        'Sure, we offer a comprehensive wedding package including catering and decoration.',
        'Do you have availability for December 2nd?',
        'Yes, we are available on that date.'
    ],
    'timestamp': ['2023-08-20 10:00:00', '2023-08-20 10:05:00', '2023-08-20 11:00:00', '2023-08-20 11:10:00']
}
messages_df = pd.DataFrame(messages_data)

messages_df

# %% ../nbs/apps/Wedding_Planner_App_Demo.ipynb 16
def send_quote_request(host_id, vendor_id, event_id, content):
    """Simulate sending a quote request from a host to a vendor."""
    # Generate a new message_id
    new_message_id = messages_df['message_id'].max() + 1
    # Current timestamp
    current_timestamp = pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')
    # Append new message to messages_df
    new_message = {
        'message_id': new_message_id,
        'sender_id': host_id,
        'receiver_id': vendor_id,
        'event_id': event_id,
        'content': content,
        'timestamp': current_timestamp
    }
    return pd.concat([messages_df, pd.DataFrame([new_message])], ignore_index=True)

# Simulate sending a quote request
updated_messages_df = send_quote_request(1, 2, 101, 'Can you provide a quote for my wedding ceremony?')
updated_messages_df

# %% ../nbs/apps/Wedding_Planner_App_Demo.ipynb 17
import ipywidgets as widgets
from IPython.display import display, clear_output

# Dropdown to select user role
user_role_dropdown = widgets.Dropdown(
    options=['Host', 'Vendor', 'Admin'],
    value='Host',
    description='User Role:',
    disabled=False,
)

# Button to submit selection
submit_button = widgets.Button(description='Submit')

# Output widget to display results
output = widgets.Output()

def on_submit_button_clicked(b):
    with output:
        clear_output()
        role = user_role_dropdown.value
        if role == 'Host':
            display('Welcome Host! Here you can create events, view quotes, and communicate with vendors.')
        elif role == 'Vendor':
            display('Welcome Vendor! Here you can view events, send quotes, and communicate with hosts.')
        else:
            display('Welcome Admin! Here you can oversee all activities and manage users.')

submit_button.on_click(on_submit_button_clicked)

display(user_role_dropdown, submit_button, output)

# %% ../nbs/apps/Wedding_Planner_App_Demo.ipynb 18
# Host Functionality

def host_interface():
    # Dropdown to select an action
    host_action_dropdown = widgets.Dropdown(
        options=['View My Events', 'Create New Event', 'View Quotes', 'Communicate with Vendors'],
        value='View My Events',
        description='Action:',
        disabled=False,
    )

    # Button to submit action
    host_submit_button = widgets.Button(description='Submit')

    # Output widget to display results
    host_output = widgets.Output()

    def on_host_submit_button_clicked(b):
        with host_output:
            clear_output()
            action = host_action_dropdown.value
            if action == 'View My Events':
                display(events_df[events_df['host_id'] == 1])  # Assuming user_id 1 for this demo
            elif action == 'Create New Event':
                display('Feature to create a new event will be here.')
            elif action == 'View Quotes':
                display(quotes_df[quotes_df['event_id'].isin(events_df[events_df['host_id'] == 1]['event_id'])])
            else:
                display('Feature to communicate with vendors will be here.')

    host_submit_button.on_click(on_host_submit_button_clicked)

    display(host_action_dropdown, host_submit_button, host_output)

host_interface()

# %% ../nbs/apps/Wedding_Planner_App_Demo.ipynb 19
# Vendor Functionality

def vendor_interface():
    # Dropdown to select an action
    vendor_action_dropdown = widgets.Dropdown(
        options=['View Available Events', 'Send Quotes', 'View Sent Quotes', 'Communicate with Hosts'],
        value='View Available Events',
        description='Action:',
        disabled=False,
    )

    # Button to submit action
    vendor_submit_button = widgets.Button(description='Submit')

    # Output widget to display results
    vendor_output = widgets.Output()

    def on_vendor_submit_button_clicked(b):
        with vendor_output:
            clear_output()
            action = vendor_action_dropdown.value
            if action == 'View Available Events':
                display(events_df)  # Display all events for simplicity
            elif action == 'Send Quotes':
                display('Feature to send quotes for events will be here.')
            elif action == 'View Sent Quotes':
                display(quotes_df[quotes_df['vendor_id'] == 2])  # Assuming vendor_id 2 for this demo
            else:
                display('Feature to communicate with hosts will be here.')

    vendor_submit_button.on_click(on_vendor_submit_button_clicked)

    display(vendor_action_dropdown, vendor_submit_button, vendor_output)

vendor_interface()

# %% ../nbs/apps/Wedding_Planner_App_Demo.ipynb 20
import ipywidgets as widgets
from IPython.display import display, clear_output

# Vendor Functionality

def vendor_interface():
    # Dropdown to select an action
    vendor_action_dropdown = widgets.Dropdown(
        options=['View Available Events', 'Send Quotes', 'View Sent Quotes', 'Communicate with Hosts'],
        value='View Available Events',
        description='Action:',
        disabled=False,
    )

    # Button to submit action
    vendor_submit_button = widgets.Button(description='Submit')

    # Output widget to display results
    vendor_output = widgets.Output()

    def on_vendor_submit_button_clicked(b):
        with vendor_output:
            clear_output()
            action = vendor_action_dropdown.value
            if action == 'View Available Events':
                display(events_df)  # Display all events for simplicity
            elif action == 'Send Quotes':
                display('Feature to send quotes for events will be here.')
            elif action == 'View Sent Quotes':
                display(quotes_df[quotes_df['vendor_id'] == 2])  # Assuming vendor_id 2 for this demo
            else:
                display('Feature to communicate with hosts will be here.')

    vendor_submit_button.on_click(on_vendor_submit_button_clicked)

    display(vendor_action_dropdown, vendor_submit_button, vendor_output)

vendor_interface()

# %% ../nbs/apps/Wedding_Planner_App_Demo.ipynb 21
# Admin Functionality

def admin_interface():
    # Dropdown to select an action
    admin_action_dropdown = widgets.Dropdown(
        options=['View All Users', 'View All Events', 'View All Quotes', 'Manage Users'],
        value='View All Users',
        description='Action:',
        disabled=False,
    )

    # Button to submit action
    admin_submit_button = widgets.Button(description='Submit')

    # Output widget to display results
    admin_output = widgets.Output()

    def on_admin_submit_button_clicked(b):
        with admin_output:
            clear_output()
            action = admin_action_dropdown.value
            if action == 'View All Users':
                display(users_df)
            elif action == 'View All Events':
                display(events_df)
            elif action == 'View All Quotes':
                display(quotes_df)
            else:
                display('Feature to manage users (approve/reject vendor registrations) will be here.')

    admin_submit_button.on_click(on_admin_submit_button_clicked)

    display(admin_action_dropdown, admin_submit_button, admin_output)

admin_interface()

# %% ../nbs/apps/Wedding_Planner_App_Demo.ipynb 24
import sqlite3

# Create a new SQLite3 database
conn = sqlite3.connect('wedding_planner_app.db')
cursor = conn.cursor()

# Create Users Table
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    user_type TEXT NOT NULL,
    name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    phone_number TEXT,
    registration_date DATE DEFAULT CURRENT_DATE
)
''')

# Create Events Table
cursor.execute('''
CREATE TABLE IF NOT EXISTS events (
    event_id INTEGER PRIMARY KEY,
    host_id INTEGER,
    event_name TEXT NOT NULL,
    event_type TEXT NOT NULL,
    budget REAL,
    event_date DATE,
    creation_date DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (host_id) REFERENCES users(user_id)
)
''')

# Create Quotes Table
cursor.execute('''
CREATE TABLE IF NOT EXISTS quotes (
    quote_id INTEGER PRIMARY KEY,
    event_id INTEGER,
    vendor_id INTEGER,
    amount REAL NOT NULL,
    quote_date DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (event_id) REFERENCES events(event_id),
    FOREIGN KEY (vendor_id) REFERENCES users(user_id)
)
''')

# Create Messages Table
cursor.execute('''
CREATE TABLE IF NOT EXISTS messages (
    message_id INTEGER PRIMARY KEY,
    sender_id INTEGER,
    receiver_id INTEGER,
    event_id INTEGER,
    message_content TEXT NOT NULL,
    message_date DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (sender_id) REFERENCES users(user_id),
    FOREIGN KEY (receiver_id) REFERENCES users(user_id),
    FOREIGN KEY (event_id) REFERENCES events(event_id)
)
''')

# Commit the changes and close the connection
conn.commit()
conn.close()

print('Database and schema created successfully!')
